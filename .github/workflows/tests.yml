name: Playwright Tests under Docker

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:  # Allows manual triggering of the workflow from the GitHub interface

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - uses: actions/checkout@v4

    # Step 2: Set up the Node.js environment with the latest LTS version
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    # Step 3: Install Node.js dependencies using npm ci
    - name: Install dependencies
      run: npm ci

    # Step 4: Install Playwright browsers and their dependencies
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    # Step 5: Cache Playwright browsers
    - name: Cache Playwright browsers
      id: playwright-cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    # Step 6: Create Docker buildx cache directory if it doesn't exist
    - name: Create Docker buildx cache directory
      run: |
        mkdir -p /tmp/.buildx-cache

    # Step 7: Install Docker on the runner machine
    - name: Set up Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    # Step 8: Cache Docker image to improve build performance by reducing download time
    - name: Cache Docker image
      id: docker-cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-docker-
      continue-on-error: true # Esto permitirá que el workflow continúe incluso si no se encuentra el directorio

    # Step 9: Pull the Docker image containing the web app
    - name: Pull Docker image
      run: |
        docker pull automaticbytes/demo-app

    # Step 10: Run the Docker container on port 3100
    - name: Run Docker container
      run: |
        docker run -d -p 3100:3100 automaticbytes/demo-app

    # Step 11: Wait for the application to be ready (active check)
    - name: Wait for the app to be ready
      run: |
        # Check that the server is responding on port 3100
        until curl -s --head --request GET http://localhost:3100 | grep "200 OK" > /dev/null; do
          echo "Waiting for the app to be ready..."
          sleep 2  # Wait 2 seconds before trying again
        done
        echo "The app is ready, continuing with the tests."

    # Step 12: Run Playwright tests
    - name: Run Playwright Tests
      run: npx playwright test

    # Step 13: Upload Playwright test report as an artifact for later access
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
